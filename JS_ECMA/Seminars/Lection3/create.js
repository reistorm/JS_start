// Метод Object.create позволяет создавать новые объекты, принимая в качестве
//  аргументов объект прототип для создаваемого объекта, и вторым аргументом 
// (необязательным) свойства для нового объекта в формате объект с ключами и 
// значениями дескрипторов для свойств. Использовать этот метод для создания 
// новых объектов по типу наших роботов-пылесосов не очень удобно, нужно будет
// либо все свойства нового объекта указывать дескрипторами, что не очень удобно
// (ногибко), либо создавать с помощью метода объект с указанием прототипа, а все
// остальные свойства добавлять позже, но есть важная особенность у этого метода, 
// которую можно использовать - в качестве первого аргумента можно передать null 
// и тогда будет создан объект без прототипа. 

// Создадим робот пылесосSamba. 
const Samba1 = new Samba(101); 
// Попробуем обратиться к стандартному методу toString, хоть мы его и 
// не объявляли ни в одном из объектов. 
console.log(Samba1.toString()); // [object Object]

// Хоть мы и не объявляли метод toString в нашей цепочки объектов, но он 
// присутствует и идёт от самого первого объекта (базового), т.к. его прототип - 
// это сам объект Object, и метод toString пришел от него. Иногда бывает так,
// что нам совсем не нужны чужие методы, и не нужен прототип в объекте, 
// потому что обращение к свойствам объекта определяются тем, что напишет 
// пользователь, и пользователь может запросить свойство toString, которое мы 
// не хотели бы показывать,и вот тут как раз можно использовать метод Object.create:

// Создадим пустой объект без прототипа. 
const Samba1 = Object.create(null); 

// Попробуем обратиться к стандартному методу toString и посмотреть 
// на свойство __proto__ 
console.log(Samba1.toString); // undefined 
console.log(Samba1.__proto__); // undefined

// Таким образом мы получили чистый объект, без прототипа, а следовательно и без свойств из него.